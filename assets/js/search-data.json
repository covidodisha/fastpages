{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [] FILTERED_REGION_CODES = [] %config InlineBackend.figure_format = &#39;retina&#39; . # Column vector of k k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) . (70, 4) . fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $P left(k_t=20| lambda right)$&#39;); . k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/7 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 5.85 2 4.22 3 4.33 dtype: float64 . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors) hdi.tail() . Low_90 High_90 . Day . 1 3.99 | 7.65 | . 2 3.03 | 5.40 | . 3 3.49 | 5.19 | . ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . dfi = pd.read_csv(&quot;http://api.covid19india.org/states_daily_csv/confirmed.csv&quot;) dfi.head() dfi.columns . Index([&#39;date&#39;, &#39;TT&#39;, &#39;AN&#39;, &#39;AP&#39;, &#39;AR&#39;, &#39;AS&#39;, &#39;BR&#39;, &#39;CH&#39;, &#39;CT&#39;, &#39;DD&#39;, &#39;DL&#39;, &#39;DN&#39;, &#39;GA&#39;, &#39;GJ&#39;, &#39;HP&#39;, &#39;HR&#39;, &#39;JH&#39;, &#39;JK&#39;, &#39;KA&#39;, &#39;KL&#39;, &#39;LA&#39;, &#39;LD&#39;, &#39;MH&#39;, &#39;ML&#39;, &#39;MN&#39;, &#39;MP&#39;, &#39;MZ&#39;, &#39;NL&#39;, &#39;OR&#39;, &#39;PB&#39;, &#39;PY&#39;, &#39;RJ&#39;, &#39;SK&#39;, &#39;TG&#39;, &#39;TN&#39;, &#39;TR&#39;, &#39;UP&#39;, &#39;UT&#39;, &#39;WB&#39;, &#39;Unnamed: 39&#39;], dtype=&#39;object&#39;) . # Data preprocessing # Exclude states with 2 or less datapoints with 10 or less cases dfi = dfi.drop(columns=[&#39;Unnamed: 39&#39;], axis=1) cols = dfi.columns[1:] dfi.loc[:, cols] = dfi.loc[:, cols].cumsum(axis=0) nstates = dfi.columns[1:].tolist() dfa = pd.DataFrame() for i, state in enumerate(nstates): dfc = dfi[[&#39;date&#39;, state]].copy() dfc[&#39;state&#39;] = state dfc = dfc.rename({state: &#39;cases&#39;}, axis=1) dfc[&#39;date&#39;] = pd.to_datetime(dfc[&#39;date&#39;]) dfc = dfc[dfc.cases &gt; 10].copy() if (len(dfc) &gt; 2): dfa = dfa.append(dfc) else: print(f&quot;Excluding state {state}&quot;) dfa[&#39;date&#39;] = pd.to_datetime(dfa[&#39;date&#39;]) states = dfa.set_index([&#39;state&#39;, &#39;date&#39;]).squeeze() states . Excluding state AR Excluding state DD Excluding state DN Excluding state GA Excluding state LD Excluding state MN Excluding state MZ Excluding state NL Excluding state PY Excluding state SK Excluding state TR . state date TT 2020-03-14 81.0 2020-03-15 108.0 2020-03-16 123.0 2020-03-17 134.0 2020-03-18 171.0 2020-03-19 198.0 2020-03-20 256.0 2020-03-21 334.0 2020-03-22 401.0 2020-03-23 503.0 2020-03-24 567.0 2020-03-25 657.0 2020-03-26 722.0 2020-03-27 886.0 2020-03-28 1029.0 2020-03-29 1139.0 2020-03-30 1326.0 2020-03-31 1635.0 2020-04-01 2059.0 2020-04-02 2545.0 2020-04-03 3105.0 2020-04-04 3684.0 2020-04-05 4293.0 2020-04-06 4777.0 2020-04-07 5349.0 2020-04-08 5914.0 2020-04-09 6727.0 2020-04-10 7598.0 2020-04-11 8452.0 2020-04-12 9210.0 ... UT 2020-04-18 42.0 2020-04-19 44.0 2020-04-20 46.0 2020-04-21 46.0 WB 2020-03-27 15.0 2020-03-28 18.0 2020-03-29 21.0 2020-03-30 22.0 2020-03-31 37.0 2020-04-01 37.0 2020-04-02 53.0 2020-04-03 53.0 2020-04-04 53.0 2020-04-05 80.0 2020-04-06 80.0 2020-04-07 91.0 2020-04-08 99.0 2020-04-09 103.0 2020-04-10 116.0 2020-04-11 126.0 2020-04-12 134.0 2020-04-13 152.0 2020-04-14 190.0 2020-04-15 213.0 2020-04-16 231.0 2020-04-17 255.0 2020-04-18 287.0 2020-04-19 310.0 2020-04-20 339.0 2020-04-21 392.0 Name: cases, Length: 736, dtype: float64 . state_name = &#39;MP&#39; def prepare_cases(cases): new_cases = cases.diff() smoothed = new_cases.rolling(9, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=3).round() idx_start = np.searchsorted(smoothed, 10) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed cases = states.xs(state_name).rename(f&quot;{state_name} cases&quot;) original, smoothed = prepare_cases(cases) original.plot(title=f&quot;{state_name} New Cases per Day&quot;, c=&#39;k&#39;, linestyle=&#39;:&#39;, alpha=.5, label=&#39;Actual&#39;, legend=True, figsize=(500/72, 400/72)) ax = smoothed.plot(label=&#39;Smoothed&#39;, legend=True) ax.get_figure().set_facecolor(&#39;w&#39;) . def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator) return posteriors, log_likelihood # Note that we&#39;re fixing sigma to a value just for the example posteriors, log_likelihood = get_posteriors(smoothed, sigma=.25) . ax = posteriors.plot(title=f&#39;{state_name} - Daily Posterior for $R_t$&#39;, legend=False, lw=1, c=&#39;k&#39;, alpha=.3, xlim=(0.4,6)) ax.set_xlabel(&#39;$R_t$&#39;); . # Note that this takes a while to execute - it&#39;s not the most efficient algorithm hdis = highest_density_interval(posteriors, p=.9) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) # Look into why you shift -1 result = pd.concat([most_likely, hdis], axis=1) result.tail() . ML Low_90 High_90 . date . 2020-04-17 1.31 | 0.71 | 1.89 | . 2020-04-18 1.08 | 0.49 | 1.68 | . 2020-04-19 0.82 | 0.22 | 1.40 | . 2020-04-20 0.51 | 0.02 | 1.06 | . 2020-04-21 0.27 | 0.00 | 0.86 | . def plot_rt(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) fig, ax = plt.subplots(figsize=(600/72,400/72)) plot_rt(result, ax, state_name) ax.set_title(f&#39;Real-time $R_t$ for {state_name}&#39;) ax.xaxis.set_major_locator(mdates.WeekdayLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) . sigmas = np.linspace(1/20, 1, 20) targets = ~states.index.get_level_values(&#39;state&#39;).isin(FILTERED_REGION_CODES) states_to_process = states.loc[targets] results = {} failed_states = [] for state_name, cases in states_to_process.groupby(level=&#39;state&#39;): print(state_name) new, smoothed = prepare_cases(cases) result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] try: for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of state name results[state_name] = result clear_output(wait=True) except: print(f&quot;Error for state {state_name}&quot;) failed_states.append(state_name) print(&#39;Done.&#39;) . Done. . print(f&quot;Failed for {len(failed_states)} states {failed_states}&quot;) . Failed for 11 states [&#39;AN&#39;, &#39;AS&#39;, &#39;CH&#39;, &#39;CT&#39;, &#39;HP&#39;, &#39;HR&#39;, &#39;JH&#39;, &#39;LA&#39;, &#39;ML&#39;, &#39;OR&#39;, &#39;UT&#39;] . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each state&#39;s results and add the log likelihoods to the running total. for state_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . &lt;matplotlib.lines.Line2D at 0x7f3140acd890&gt; . final_results = None for state_name, result in results.items(): print(state_name) posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) print(&#39;Done.&#39;) . Done. . ncols = 4 nrows = int(np.ceil(len(results) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): plot_rt(result, axes.flat[i], state_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . # Uncomment the following line if you&#39;d like to export the data #final_results.to_csv(&#39;/demo/India-States/rt_old.csv&#39;) . # As of 4/12 no_lockdown = [ ] partial_lockdown = [ ] FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by State&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) for bar, state_name in zip(bars, mr.index): if state_name in no_lockdown: bar.set_color(NONE_COLOR) if state_name in partial_lockdown: bar.set_color(PARTIAL_COLOR) labels = mr.index.to_series().replace({&#39;District of Columbia&#39;:&#39;DC&#39;}) ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) leg = ax.legend(handles=[ Patch(label=&#39;Full&#39;, color=FULL_COLOR), Patch(label=&#39;Partial&#39;, color=PARTIAL_COLOR), Patch(label=&#39;None&#39;, color=NONE_COLOR) ], title=&#39;Lockdown&#39;, ncol=3, loc=&#39;upper left&#39;, columnspacing=.75, handletextpad=.5, handlelength=1) leg._legend_box.align = &quot;left&quot; fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr); . show = mr[mr.High_90.le(1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . show = mr[mr.Low_90.ge(1.0)].sort_values(&#39;Low_90&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); ax.get_legend().remove() .",
            "url": "https://covidodisha.github.io/fastpages/2020/04/24/states-Rt.html",
            "relUrl": "/2020/04/24/states-Rt.html",
            "date": " • Apr 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://covidodisha.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://covidodisha.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://covidodisha.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://covidodisha.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}